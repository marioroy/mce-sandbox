##
# Algorithm3 (parallel range variant, using @par(gpu=True) syntax).
#   Codon GPU demonstration by Mario Roy, 2023-09-03
#
# Xuedong Luo:
#   A practical sieve algorithm for finding prime numbers.
#   ACM Volume 32 Issue 3, March 1989, Pages 344-346
#   https://dl.acm.org/doi/pdf/10.1145/62065.62072
#   http://dl.acm.org/citation.cfm?doid=62065.62072
#
#   "Based on the sieve of Eratosthenes, a faster and more compact
#    algorithm is presented for finding all primes between 2 and N.
#    Avoid all composites that have 2 or 3 as one of their prime
#    factors (where i is odd)."
#
#   { 0, 5, 7, 11, 13, ... 3i + 2, 3(i + 1) + 1, ..., N }
#     0, 1, 2,  3,  4, ... list indices (0 is not used)
#
# Build:
#   codon build -release -o pgpusieve pgpusieve.codon
#
#   Codon Documentation https://docs.exaloop.io/codon/
#   Codon GitHub Repo   https://github.com/exaloop/codon
#
# Usage:
#   pgpusieve [ N [ N ] [ -p ] ]  default 1 1000
#   pgpusieve 100 -p              print primes found
#   pgpusieve 1e+10 1.1e+10       count primes found
#   pgpusieve 87233720365000000 87233720368547757
#   pgpusieve 1e12 1.1e12
#
# NVIDIA GeForce RTX 3070 Results:  @par(gpu=True)  @gpu.kernel       NPrimes
#   pgpusieve 1e+9  . . . . . . . . . .   0.191s       0.047s      50,847,534
#   pgpusieve 1e+10 . . . . . . . . . .   2.644s       0.553s     455,052,511
#   pgpusieve 1e+11 . . . . . . . . . .  27.962s       9.469s   4,118,054,813
#   pgpusieve 1e+12 1.1e+12 . . . . . .  32.379s      15.183s   3,612,791,400
#   pgpusieve 1e+13 1.01e+13  . . . . .  33.743s      17.968s   3,340,141,707
#   pgpusieve 1e+14 1.001e+14 . . . . .  31.274s      21.981s   3,102,063,927
#   pgpusieve 1e+15 1.0001e+15  . . . .  30.814s      24.549s   2,895,317,534
#   pgpusieve 1e+16 1.00001e+16 . . . .  35.010s      27.558s   2,714,336,584
#   pgpusieve 1e+17 1.000001e+17  . . .  57.573s      38.371s   2,554,712,095
#   pgpusieve 1e+18 1.0000001e+18 . . . 124.274s      68.059s   2,412,731,214
#                 pgpusieve.codon ----------|            |
#                  gpusieve.codon -----------------------|
##

import math
from sys import argv, exit, stderr, stdout
from time import time
import intn_helper

def strToUInt(what: str) -> u64:
    # Convert a string to UInt, supporting scientific notation.
    try:
        n = u64(what)
    except:
        s = f"{float(what):.1f}"
        p = s.rfind('.')
        n = u64(s[:p])
    return n


def popcount(s, size) -> int:
    count, i = 0, 0

    if size == 0:
        return count

    if size > 8:
        a = Ptr[u64](s.as_byte())
        asize = (size + 7) // 8 - 1

        m1  = u64(0x5555555555555555)
        m2  = u64(0x3333333333333333)
        m4  = u64(0x0f0f0f0f0f0f0f0f)
        h01 = u64(0x0101010101010101)

        for j in range(asize):
            b = a[j]
            b =  b       - ((b >> 1)  & m1)
            b = (b & m2) + ((b >> 2)  & m2)
            b = (b       +  (b >> 4)) & m4
            count += int((b * h01) >> 56)

        i = asize * 8

    for j in range(i, size):
        count += s[j].popcnt()

    return count


@inline
def CLRBIT(s, i):
    s[i >> 3] &= ~(1 << (i & 7))

@inline
def GETBIT(s, i) -> u8:
    return s[i >> 3] & (1 << (i & 7))


def makeprimes(stop: u64) -> List[u8]:

    q = int(math.sqrt(float(stop))) // 3
    mem_sz = (q + 2 + 7) // 8
    c, k, t, j, ij = 0, 1, 2, 0, 0

    array = List[u8]( Array[u8](mem_sz), mem_sz )
    str.memset(array.arr.ptr.as_byte(), byte(0xff), mem_sz)
    CLRBIT(array, 0)

    # clear small composites <= q
    for i in range(1, q + 1):
        k = 3 - k; c += 4 * k * i; j = c
        ij = 2 * i * (3 - k) + 1; t += 4 * k
        if GETBIT(array, i):
            while j <= q:
                CLRBIT(array, j)
                j += ij; ij = t - ij

    return array


def prangesieve(start: u64, stop: u64, print_flag: int) -> None:

    # adjust start to a multiple of 6; then subtract 6 and add 1
    if start > 5:
        start_adj = start - (start % 6) - 6 + 1
    else:
        start_adj = u64(1)

    if stop < int(1e11):
        bsize, step_sz =  4, 39600
    elif stop < int(1e14):
        bsize, step_sz =  8, 39600
    elif stop < int(1e16):
        bsize, step_sz = 16, 39600 * 3
    else:
        bsize, step_sz = 32, 39600 * 5

    if   stop >= strToUInt("1e+19"): step_sz *= 80
    elif stop >= strToUInt("1e+18"): step_sz *= 70
    elif stop >= strToUInt("1e+17"): step_sz *= 60
    elif stop >= strToUInt("1e+16"): step_sz *= 50
    elif stop >= strToUInt("1e+15"): step_sz *= 40
    elif stop >= strToUInt("1e+14"): step_sz *= 30
    elif stop >= strToUInt("1e+13"): step_sz *= 20
    elif stop >= strToUInt("1e+12"): step_sz *= 10

    num_segments = int((stop - start_adj + step_sz) // step_sz)
    is_prime = makeprimes(stop)
    count = 0

    M = int((stop - start_adj + (stop & 1)) // 3)
    n_off = start_adj - 1
    j_off = int(n_off // 3)
    mem_sz = (M + 2 + 7) // 8 + (num_segments - 1)

    sieve = List[u8]( Array[u8](mem_sz), mem_sz )
    str.memset(sieve.arr.ptr.as_byte(), byte(0xff), mem_sz)
    CLRBIT(sieve, 0)

    # clear bits less than start
    if n_off + ((3 * 1 + 1) | 1) < start:
        CLRBIT(sieve, 1)
        if n_off + ((3 * 2 + 1) | 1) < start:
            CLRBIT(sieve, 2)

    # clear bits greater than stop
    i = (mem_sz - (num_segments - 1)) * 8 - (M + 2)
    while i:
        CLRBIT(sieve, mem_sz * 8 - i)
        i -= 1
    if n_off + ((3 * (M + 1) + 1) | 1) > stop:
        CLRBIT(sieve, M + 1 + (num_segments - 1) * 8)
        if n_off + ((3 * M + 1) | 1) > stop:
            CLRBIT(sieve, M + (num_segments - 1) * 8)

    # create MM list; clear one-byte padding between segments
    MM = list[int]()
    off = 0

    for n in range(num_segments - 1):
        low = start_adj + step_sz * n
        high = low + step_sz - 1
        if high > stop or high < low: high = stop
        m = int(high // 3)
        MM.append(m - j_off)
        for i in range(1, 8 + 1):
            CLRBIT(sieve, m - j_off + i + off)
        off += 8

    MM.append(M + 2)
    gsize = num_segments // bsize + (1 if num_segments % bsize else 0)
    cc, kk, tt = 0, 1, 2

    # TODO: The 'bsize' and 'gsize' values are not used.
    # @par(gpu=True) syntax does not support (grid=?, block=?) options.
    # https://github.com/exaloop/codon/issues/466

    @par(gpu=True, collapse=1)
    for n in range(num_segments):

        # account for one-byte padding between segments
        s_off = j_off - n * 8
        if n == 0:
            j_off2 = j_off
        else:
            low_ = start_adj + step_sz * (n - 1)
            high_ = low_ + step_sz - 1
            if high_ > stop or high_ < low_: high_ = stop
            j_off2 = int(high_ // 3)

        # sieve primes
        low = start_adj + step_sz * n
        high = low + step_sz - 1
        if high > stop or high < low: high = stop

        q = int(math.sqrt(float(high))) // 3
        m = int(high // 3)
        c, k, t, j, ij = cc, kk, tt, 0, 0

        for i in range(1, q + 1):
            k = 3 - k; c += 4 * k * i; j = c
            ij = 2 * i * (3 - k) + 1; t += 4 * k
            if GETBIT(is_prime, i):
                # skip numbers before this segment
                if j < j_off2:
                    j += (j_off2 - j) // t * t + ij
                    ij = t - ij
                    if (j < j_off2):
                        j += ij; ij = t - ij
                # clear composites
                while j <= m:
                    CLRBIT(sieve, j - s_off)
                    j += ij; ij = t - ij

    if start <= 2 and stop >= 2: count += 1
    if start <= 3 and stop >= 3: count += 1

    s_ptr = sieve.arr.ptr
    count += popcount(s_ptr, mem_sz)

    if print_flag:
        if start <= 2 and stop >= 2: print("2")
        if start <= 3 and stop >= 3: print("3")
        off, num = 0, MM.pop(0)
        for i in range(1, M + 1, 2):
            if i >= num:
                off += 8; num = MM.pop(0)
            if (GETBIT(s_ptr, i + off)):
                print(n_off + (3 * i + 2))
            if (GETBIT(s_ptr, i + 1 + off)):
                print(n_off + (3 * (i + 1) + 1))

    print(f"Primes found: {count}", file=stderr)


def main():
    # find primes in range, inclusively
    start, stop = u64(1), u64(1000)
    loff, print_flag = -1, 0

    # check for print option (last option specified)
    if len(argv) > 0 and argv[-1] == "-p":
        print_flag = 1
        argv.pop()

    if len(argv) > 2:
        start = strToUInt(argv[1])
        stop  = strToUInt(argv[2])
    elif len(argv) > 1:
        stop  = strToUInt(argv[1])

    if stop > 0 and stop >= start: 
        if stop - start > strToUInt("1e+11"):
            print("Range distance exceeds 1e+11 (~4GB).", file=stderr)
            exit(1)
        tstart = time()
        prangesieve(start, stop, print_flag)
        tend = time()
        print(f"Seconds: {tend - tstart:0.3f}", file=stderr)


if __name__ == "__main__":
    main()

